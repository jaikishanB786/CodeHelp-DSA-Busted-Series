#include<iostream>
using namespace std;

class Node {
    public:
    int data;
    Node* next;

    Node(int d) {
        this->data = d;
        this->next = NULL;
    }
};

void print(Node* &tail) {
    Node *temp = tail;

    if(tail == NULL) {
        cout << "empty" << endl;
        return;
    }

    do {
        cout << tail->data << " ";
        tail = tail->next;
    }while(tail != temp);
    cout << endl;
}

void insertNode(Node* &head, Node* &tail, int d) {
    Node* newNode = new Node(d);

    if(head == NULL) {
        head = newNode;
        tail = newNode;
        head->next = head;
        return;
    }

    tail->next = newNode;
    tail = tail->next;
    newNode->next = head;
}

int findLen(Node* &head) {
    int cnt = 1;
    Node*temp = head->next;

    while(temp != head) {
        temp = temp->next;
        cnt++;
    }
    return cnt;
}

void divideLL(Node* &head, Node* &tail, int n) {
    int k = n / 2;
    if(n % 2 != 0) {
        k++;
    }

    // divide it into first k nodes 
    Node* temp = head;
    int i = 1;
    while(i < k) {
        temp = temp->next;
        i++;
    }

    // storing forward node 
    Node* frwd = temp->next;

    // break point and poiting it to head 
    temp->next = head;

    // breaking the tail connection with head and joining it with frwd. 
    tail->next = frwd;

    print(head); // print 1st list
    print(frwd); // print 2nd list
}

int main() {

    Node* head = NULL;
    Node* tail = NULL;

    insertNode(head, tail, 10);
    insertNode(head, tail, 9);
    insertNode(head, tail, 78);
    insertNode(head, tail, 19);
    insertNode(head, tail, 19);
    insertNode(head, tail, 100);
    insertNode(head, tail, 7463);

    cout << head->data << endl;
    cout << tail->data << endl;

    int n = findLen(head);
    cout << n << endl;

    divideLL(head, tail, n);

    return 0;
}
